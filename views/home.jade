extends layout

block header
  script(src="/socket.io/socket.io.js")
  script(src="https://code.jquery.com/jquery-2.1.1.js")
  script(src="/javascripts/chess.js")
  script.
    $(function() {
      var socket = io();
      socket.on('linked session to user', function(init_msg) {
        console.log(init_msg);

        function refreshWagerDiv(wager_div, game) {
          wager_div.empty();
          var white_wager_div = $('<div/>').addClass('white-wager-div').appendTo(wager_div),
              black_wager_div = $('<div/>').addClass('black-wager-div').appendTo(wager_div),
              white_wager_label = $('<span/>').addClass('white-wager-label').text('white: ').appendTo(white_wager_div),
              black_wager_label = $('<span/>').addClass('black-wager-label').text('black: ').appendTo(black_wager_div),
              white_wager = $('<span/>').addClass('white-wager').text(game.white_wager).appendTo(white_wager_div),
              black_wager = $('<span/>').addClass('black-wager').text(game.black_wager).appendTo(black_wager_div);

          if(game.white_wager_accepted && game.black_wager_accepted ) {
            var escrow_addr_div = $('<div/>').addClass('escrow-addr-div').appendTo(wager_div),
                escrow_addr_label = $('<span/>').addClass('escrow-addr-label').text('escrow address: ').appendTo(escrow_addr_div),
                escrow_addr = $('<span/>').addClass('escrow-addr').text(game.escrow_addr).appendTo(escrow_addr_div);
          } else if(game.is_white && game.white_wager_accepted || !game.is_white && game.black_wager_accepted) {
            var waiting_for_other_player_div = $('<div/>').addClass('waiting-for-player-accept-div').appendTo(wager_div),
                waiting_for_other_player_msg = $('<span/>').addClass('waiting-for-player-accept-msg')
                  .text('waiting for other player...').appendTo(wager_div);
          } else {
            var wager_controls_div = $('<div/>').addClass('wager-controls-div').appendTo(wager_div),
                wager_control_accept = $('<button/>').addClass('wager-control-accept').text('accept wager').appendTo(wager_controls_div),
                wager_control_reject = $('<button/>').addClass('wager-control-reject').text('reject wager').appendTo(wager_controls_div);

            wager_control_accept.click(function() {
              socket.emit('game control', {
                game_id: game.id,
                type: 'accept wager' });
            });

            wager_control_reject.click(function() {
              socket.emit('game control', {
                game_id: game.id,
                type: 'reject wager' });
            });
          }
        }

        var self_id = init_msg.user_id,
            game_map = {},
            game_divs = {},
            wager_divs = {};

        $.each(init_msg.games, function(i) {
          var game = init_msg.games[i];
          var game_div = $('<div/>').addClass('game-div');
          var title_div = $('<div/>').addClass('title-div').appendTo(game_div),
              white_span = $('<span/>').addClass('white-span').text(game.white_username).appendTo(title_div),
              vs_span = $('<span/>').addClass('vs-span').text(' vs ').appendTo(title_div),
              black_span = $('<span/>').addClass('black-span').text(game.black_username).appendTo(title_div);

          var wager_div = $('<div/>').addClass('wager-div').appendTo(game_div);
          refreshWagerDiv(wager_div, game);
          game_div.appendTo($('#games'));
          game_map[game.id] = game;
          game_divs[game.id] = game_div;
          wager_divs[game.id] = wager_div;
        });

        socket.on('active users update', function(msg) {
          console.log(msg);
          var users = [];
          for (var id in msg) {
            if(msg.hasOwnProperty(id)) {
              users.push({ 'id': id, 'name': msg[id].username });
            }
          }
          users.sort(function(a, b) {
            if (a.username < b.username)
               return -1;
            if (a.username > b.username)
              return 1;
            return a.id - b.id;
          });
          console.log(users);

          var activeUsersList = $('ul#activeusers').empty();

          $.each(users, function(i) {
            var user = users[i];
            var li = $('<li/>')
              .appendTo(activeUsersList);
            var userLink = $('<button/>')
              .addClass('user-button')
              .text(user.name)
              .appendTo(li)
              .click(function() {
                console.log(user.id);
              });
          });
        });

        socket.on('update game', function(msg) {
          console.log(msg);
          var game = game_map[msg.game_id],
              game_div = game_divs[msg.game_id],
              wager_div = wager_divs[msg.game_id];
          if(game_div) {
            var wager_fields = ['white_wager_accepted', 'black_wager_accepted'];

            for(var i = 0; i < wager_fields.length; ++i) {
              var wager_field = wager_fields[i];
              if(wager_field in msg) {
                game[wager_field] = msg[wager_field];
                refreshWagerDiv(wager_div, game);
              }
            }
          }
        });

        socket.on('destroy game', function(msg) {
          console.log(msg);
          var game_div = game_divs[msg.game_id];
          if(game_div) {
            game_div.empty();
            $('<span/>').addClass('rejection-notify').text('game has been rejected').appendTo(game_div);

            setTimeout(function() {
              game_div.remove();

              delete games[msg.game_id];
              delete game_divs[msg.game_id];
              delete wager_divs[msg.game_id];
            }, 2000);
          }
        });

        socket.emit('user activated', true);
      });
    });

block content
  h1= title
  ul#activeusers.userlist
  #games

